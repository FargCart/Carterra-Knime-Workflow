<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="python_script" type="xstring" value="def createCell(lin, ind, rowID):%%00010    strCell = StringCell(lin)%%00010    #strCell.setValue(lin)%%00010    idxCell = IntCell(str(ind))%%00010    #idxCell.setValue(str(ind))%%00010    newRow = DefaultRow(&quot;Row%s&quot; % rowID, [strCell, idxCell])%%00010    newRow.colNames = [&quot;CSV&quot;, &quot;Ind&quot;]%%00010    outContainer[0].addRowToTable(newRow)%%00010%%00010#def removeCommaInPara(lin):%%00010#    if lin.count('\&quot;', 0, len(lin))%2 == 1 and lin.count('\&quot;', 0, len(lin)) != 0:%%00010#        #start after first parathese%%00010#        ind2 = lin.index('\&quot;', 0, len(lin))%%00010#        for e in range(0, lin.count('\&quot;', 0, len(lin))/2)%%00010#            ind1 = lin.index('\&quot;', ind2, len(lin))%%00010#            #print &gt;&gt; sys.stderr, ind1 %%00010#            ind2 = lin.index('\&quot;', ind1, len(lin))%%00010#            try:%%00010#                indComma = lin.index(&quot;,&quot;, ind1, ind2)   #remove comma within parathese%%00010#                lin = lin[:indComma] + lin[(indComma+1):]%%00010#                return lin%%00010#            except ValueError:%%00010#                #do nothing%%00010#                return lin%%00010#    elif lin.count('\&quot;', 0, len(lin))%2 == 0 and lin.count('\&quot;', 0, len(line)) != 0:%%00010#        ind2 = 0%%00010#        for e in range(0, line.count('\&quot;', 0, len(line))/2)%%00010#            ind1 = lin.index('\&quot;', ind2, len(lin))%%00010#            #print &gt;&gt; sys.stderr, ind1 %%00010#            ind2 = lin.index('\&quot;', ind1, len(lin))%%00010#            try:%%00010#                indComma = lin.index(&quot;,&quot;, ind1, ind2)   #remove comma within parathese%%00010#                line = lin[:indComma] + line[(indComma+1):]%%00010#                return lin%%00010#            except ValueError:%%00010#                #do nothing%%00010#                return lin%%00010%%00010iterator = inData[0].iterator()%%00010index = 0%%00010rowid = 0%%00010quote = False%%00010while iterator.hasNext():%%00010    row = iterator.next()%%00010    cell_str = row.getCell(0).getValue()%%00010%%00010    postcell_str = &quot;&quot;%%00010    inPara = False%%00010%%00010    for line in cell_str.split('\&quot;'):%%00010        if inPara:%%00010            line = line.replace(',',' ').replace('\n',' ')%%00010            inPara = False%%00010        else:%%00010            inPara = True%%00010        postcell_str = postcell_str + line%%00010            %%00010    %%00010    for line in postcell_str.split(&quot;\n&quot;):%%00010        if not line:%%00010            continue%%00010        if line.count('\&quot;', 0, len(line)) == 1 and not quote:%%00010            catLine = line.replace('&quot;', &quot;&quot;)%%00010            quote = True%%00010        elif quote:%%00010            #line = removeCommaInPara(line)%%00010            catLine = catLine + &quot;\n&quot; + line.replace(&quot;\&quot;&quot;, &quot;&quot;)%%00010            if line.count('\&quot;', 0, len(line)) == 1:%%00010                createCell(catLine + &quot;\'&quot;, index, rowid)%%00010                rowid = rowid + 1%%00010                quote = False%%00010        #elif line.count('\&quot;', 0, len(line))%2 == 0 and line.count('\&quot;', 0, len(line)) != 0:%%00010        #     ind1 = line.index('\&quot;', 0, len(line))%%00010        #     #print &gt;&gt; sys.stderr, ind1 %%00010        #     ind2 = line.index('\&quot;', ind1, len(line))%%00010        #     try:%%00010        #         indComma = line.index(&quot;,&quot;, ind1, ind2)   #remove comma within parathese%%00010        #         line = line[:indComma] + line[(indComma+1):]%%00010        #     except ValueError:%%00010                 #do nothing%%00010        #         line%%00010        else:%%00010            createCell(line, index, rowid)%%00010            rowid = rowid + 1%%00010    index = index + 1    %%00010%%00010"/>
<entry key="schrodinger_plugin_version" type="xstring" value="3.7.10.201702201108"/>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value="Parsing"/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="367"/>
<entry key="y-coordinate" type="xint" value="79"/>
<entry key="width" type="xint" value="107"/>
<entry key="height" type="xint" value="13"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<entry key="borderSize" type="xint" value="0"/>
<entry key="borderColor" type="xint" value="0"/>
<entry key="defFontSize" type="xint" value="-1"/>
<entry key="annotation-version" type="xint" value="-1"/>
<config key="styles"/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="IDLE"/>
<entry key="factory" type="xstring" value="com.schrodinger.knime.node.python11.Python11NodeFactory"/>
<entry key="node-name" type="xstring" value="Python Script 1:1"/>
<entry key="node-bundle-name" type="xstring" value="SchrodingerFreeNodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="com.schrodinger.knime.freenodes"/>
<entry key="node-bundle-vendor" type="xstring" value="Schrodinger"/>
<entry key="node-bundle-version" type="xstring" value="3.7.10.201702201108"/>
<entry key="node-feature-name" type="xstring" value="SchrÃ¶dinger Free Nodes"/>
<entry key="node-feature-symbolic-name" type="xstring" value="com.schrodinger.knime.feature.freenodes.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="Schrodinger"/>
<entry key="node-feature-version" type="xstring" value="3.7.10.201702201108"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="Python Script 1:1"/>
<entry key="hasContent" type="xboolean" value="false"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_dir_location" type="xstring" isnull="true" value=""/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" isnull="true" value=""/>
</config>
</config>
